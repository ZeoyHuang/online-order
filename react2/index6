<!DOCTYPE html>
<html lang="en">
 <head>
   <meta charset="UTF-8" />
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <meta name="viewport" content="width=device-width, initial-scale=1.0" />
   <title>Document</title>
   <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
   <script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js"></script>
 </head>
 <body>
   <div id="root"></div>


   <script type="text/babel">
     const Parent = () => {
       const [balance, setBalance] = React.useState(1000);
       const [showChild, setShowChild] = React.useState(false);


       React.useEffect(() => {
         console.log(
           "componentDidMount / componentDidUpdate - Parent Component"
         );
         return () => {
           // clean up function
           console.log("clean up / componentWillUnmount - Parent Component");
         };


         // optional second parameter (dependency array) to optimize the performance
         // case 1: passing a dependency array e.g. [a, b] - whenever a or b changed, run effects
         // case 2: passing an empty array e.g. [] - run only once after the initial render
         // case 3: passing no dependency array - always runs again
       }, [balance, showChild]);


       console.log("render() - Parent Component");
       return (
         <div>
           <p>继承者们的故事</p>
           <p>Parent</p>
           <p>
             account balance: <mark>{balance}</mark>
           </p>


           <div>
             <button
               onClick={() => {
                 setShowChild(!showChild);
               }}
             >
               生小宝宝 / 消失掉小宝宝
             </button>
           </div>


           <div>
             <button
               onClick={() => {
                 setBalance(balance + 100);
               }}
             >
               给小宝宝挣奶粉钱
             </button>
           </div>


           {/* ternary operator
              booleanExpression
                  ? ifTrueReturnThis
                  : ifFalseReturnThis
           */}


           {showChild ? (
             <Child balance={balance} msg="好好学习，天天向上" />
           ) : null}
         </div>
       );
     };


     const Child = (props) => {
       const [balance, setBalance] = React.useState(0);


       React.useEffect(() => {
         console.log(
           "componentDidMount / componentDidUpdate - Child Component"
         );
         return () => {
           // clean up function
           console.log("clean up / componentWillUnmount - Child Component");
         };
       });


       console.log("render() - Child Component");
       return (
         <div>
           <p>Child</p>
           <p>Parent's account balance: {props.balance}</p>
           <p>自己的小金库: {balance}</p>


           <div>
             <button
               onClick={() => {
                 setBalance(balance + 100);
               }}
             >
               我要存钱
             </button>
           </div>
         </div>
       );
     };


     ReactDOM.render(<Parent />, document.getElementById("root"));
   </script>
 </body>
</html>
